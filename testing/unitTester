import os
import sys
import datetime
import unittest
import functools
'''
Note that in order to test something, we use one of the assert*() methods provided by the TestCase base class.
If the test fails, an exception will be raised, and unittest will identify the test case as a failure.
Any other exceptions will be treated as errors. This helps you identify where the problem
is: failures are caused by incorrect results - a 5 where you expected a
6. Errors are caused by incorrect code - e.g., a TypeError caused by an incorrect function call.
'''

'''
If the setUp() method raises an exception while the test is running, the framework will consider the
test to have suffered an error, and the runTest() method will not be executed.
Similarly, we can provide a tearDown() method that tidies up after the runTest() method has been run.
'''

class WidgetTestCase(unittest.TestCase):
    def setUp(self):
        self.widget = Widget('The widget')

    def tearDown(self):
        self.widget.dispose()
        self.widget = None

    def test_default_size(self):
        self.assertEqual(self.widget.size(), (50,50),
                         'incorrect default size')

    def test_resize(self):
        self.widget.resize(100,150)
        self.assertEqual(self.widget.size(), (100,150),
                         'wrong size after resize')

class TestStringMethods(unittest.TestCase):
    def test_upper(self):
        self.assertEqual('foo'.upper(), 'FOO')
    def test_isuppper(self):
        self.assertTrue('FOO'.isupper())
        self.assertFalse('Foo'.isupper())
    def test_split(self):
        s = 'hello world'
        self.assertEqual(s.split(),['hello','world'])
        #Check that s.split fails when the seperator is not a string
        with self.assertRaises(TypeError):
            s.split(2)

if __name__== '__main__':
    unittest.main()
defaultSizeTestCase = WidgetTestCase('test_default_size')
resizeTestCase = WidgetTestCase('test_resize')
widgetTestSuite = unittest.TestSuite()
widgetTestSuite.addTest(WidgetTestCase('test_default_size'))
widgetTestSuite.addTest(WidgetTestCase('test_resize'))